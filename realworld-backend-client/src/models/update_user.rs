/*
 * realworld-backend
 *
 * RealWorld backend implementation in Rust.
 *
 * The version of the OpenAPI document: 0.1.1
 * Contact: git@heikoseeberger.de
 * Generated by: https://openapi-generator.tech
 */

/// UpdateUser : Update for the currently logged in user.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateUser {
    #[serde(
        rename = "bio",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub bio: Option<Option<String>>,
    /// Unique email address, used for login.
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// Password.
    #[serde(rename = "password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// Unique unsername.
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

impl UpdateUser {
    /// Update for the currently logged in user.
    pub fn new() -> UpdateUser {
        UpdateUser {
            bio: None,
            email: None,
            password: None,
            username: None,
        }
    }
}
